<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>net.jufis</groupId>
	<artifactId>docker-rest-server</artifactId>
	<version>3.0.1-GA</version>
	<name>docker-rest-server</name>
	<description>docker-rest-server</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.2.3.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.7</java.version>
		<spring.boot.version>1.2.3.RELEASE</spring.boot.version>
		<junit.version>4.12</junit.version>
		<custom.docker.hostname>tcp://docker.jufis.net:2376</custom.docker.hostname>
		<custom.docker.registry.hostname>registry.jufis.net:443</custom.docker.registry.hostname>
		<custom.docker.user.repository>${user.name}-dev</custom.docker.user.repository>
		<docker.plugin.version>0.11.4</docker.plugin.version>
		<custom.docker.client.cert.path>/home/${user.name}/.docker</custom.docker.client.cert.path>
		<docker.removeAll>true</docker.removeAll>
		<jgit.version>1.2.10</jgit.version>
		<docker.expose.port>8080</docker.expose.port>
		<docker.persistent.volume>/tmp</docker.persistent.volume>
		<maven.enforcer.version>1.4</maven.enforcer.version>
		<docker.java.image.version>java:7</docker.java.image.version>
		<no.git.or.tag.bsh.expression>new
			java.io.File("${basedir}/.git").exists() &amp;&amp;
			!"${git.tag}".equals("")</no.git.or.tag.bsh.expression>
		<no.git.or.tag.found.msg>[OOPS]: !!!!!!!!!! NO GIT NATURE FOUND or TAG
			NOT EXISTS...PLEASE PULL **HARD** FROM GIT or **CREATE** TAG FIRST
			!!!!!!!!!!</no.git.or.tag.found.msg>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>environment</name>
					<value>dev</value>
				</property>
			</activation>
			<build>
				<finalName>${project.artifactId}-${project.version}</finalName>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<!-- NO GIT tags manipulation here at all -->
					<!-- enable docker maven plugin -->
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.plugin.version}</version>
						<configuration>
							<dockerHost>${custom.docker.hostname}</dockerHost>
							<useColor>true</useColor>
							<verbose>true</verbose>
							<registry>${custom.docker.registry.hostname}</registry>
							<!-- this needs to find the cert.pem, key.pem and ca.pem file in there 
								for cert client auth to docker daemon -->
							<certPath>${custom.docker.client.cert.path}</certPath>
							<authConfig>
								<username></username>
								<password></password>
							</authConfig>
							<images>
								<image>
									<alias>dockerServer</alias>
									<!-- if there is no . or : before / like here there is no registry 
										defined, so registry tag in use now -->
									<name>${custom.docker.registry.hostname}/${custom.docker.user.repository}/${project.artifactId}:latest</name>

									<build>
										<from>${docker.java.image.version}</from>
										<maintainer>${user.name}</maintainer>
										<tags>
											<tag>latest</tag>
										</tags>
										<ports>
											<port>${docker.expose.port}</port>
										</ports>
										<volumes>
											<volume>${docker.persistent.volume}</volume>
										</volumes>
										<command>java -jar
											/maven/${project.artifactId}-${project.version}.jar</command>
										<assembly>
											<basedir>/maven</basedir>
											<descriptorRef>artifact</descriptorRef>
										</assembly>
									</build>

									<run>
										<namingStrategy>alias</namingStrategy>
										<hostname>restserver</hostname>
										<log>
											<enabled>true</enabled>
											<prefix>REST_SERVER</prefix>
											<date>DEFAULT</date>
											<color>red</color>
										</log>
									</run>
								</image>
							</images>
						</configuration>
						<executions>
							<!-- if your unit tests require to start stop the docker image uncomment, 
								but make sure that the server component docker image first exists -->
							<!-- <execution> <id>start</id> <phase>pre-integration-test</phase> 
								<goals> <goal>build</goal> <goal>start</goal> </goals> </execution> <execution> 
								<id>stop</id> <phase>post-integration-test</phase> <goals> <goal>stop</goal> 
								</goals> </execution> -->
							<execution>
								<id>build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>push</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
							<execution>
								<id>remove</id>
								<phase>clean</phase>
								<goals>
									<goal>remove</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- specify manifest fields -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<archive>
								<manifestEntries>
									<Specification-Title>${project.name}</Specification-Title>
									<Specification-Version>${project.version}</Specification-Version>
									<Specification-Vendor>${project.specification_vendor}</Specification-Vendor>
									<Implementation-Title>${project.groupId}.${project.artifactId}</Implementation-Title>
									<Implementation-Version>${project.version}</Implementation-Version>
									<Implementation-Vendor>${project.implementation_vendor}</Implementation-Vendor>
								</manifestEntries>
							</archive>
						</configuration>
					</plugin>
				</plugins>
			</build>			
		</profile>
		<profile>
			<id>ci</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>environment</name>
					<value>ci</value>
				</property>
			</activation>
			<build>
				<finalName>${project.artifactId}-${project.version}-${git.buildnumber}</finalName>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<!-- enable JGit plugin -->
					<plugin>
						<groupId>ru.concerteza.buildnumber</groupId>
						<artifactId>maven-jgit-buildnumber-plugin</artifactId>
						<version>${jgit.version}</version>
						<executions>
							<execution>
								<id>git-buildnumber</id>
								<goals>
									<goal>extract-buildnumber</goal>
								</goals>
								<phase>prepare-package</phase>
								<configuration>
									<javaScriptBuildnumberCallback>
										((tag!=null &amp;&amp;
										tag.trim().length>0)?tag:"NOTAG") + "_" + branch
									</javaScriptBuildnumberCallback>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- fail if there is no git repository found or if there is GIT repo 
						without a tag created -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>${maven.enforcer.version}</version>
						<executions>
							<execution>
								<id>enforce-git-repo</id>
								<phase>compile</phase>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<evaluateBeanshell>
											<condition>${no.git.or.tag.bsh.expression}</condition>
											<message>${no.git.or.tag.found.msg}</message>
										</evaluateBeanshell>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
							<execution>
								<id>enforce-git-tag</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<evaluateBeanshell>
											<condition>${no.git.or.tag.bsh.expression}</condition>
											<message>${no.git.or.tag.found.msg}</message>
										</evaluateBeanshell>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- enable docker maven plugin -->
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.plugin.version}</version>
						<configuration>
							<dockerHost>${custom.docker.hostname}</dockerHost>
							<useColor>true</useColor>
							<verbose>true</verbose>
							<registry>${custom.docker.registry.hostname}</registry>
							<!-- this needs to find the cert.pem, key.pem and ca.pem file in there 
								for cert client auth to docker daemon -->
							<certPath>${custom.docker.client.cert.path}</certPath>
							<authConfig>
								<username></username>
								<password></password>
							</authConfig>
							<images>
								<image>
									<alias>dockerServer</alias>
									<!-- if there is no . or : before / like here there is no registry 
										defined, so registry tag in use now -->
									<name>${custom.docker.registry.hostname}/ci/${project.artifactId}:${git.buildnumber}</name>

									<build>
										<from>${docker.java.image.version}</from>
										<maintainer>${user.name}</maintainer>
										<tags>
											<tag>${git.buildnumber}</tag>
										</tags>
										<ports>
											<port>${docker.expose.port}</port>
										</ports>
										<volumes>
											<volume>${docker.persistent.volume}</volume>
										</volumes>
										<command>java -jar
											/maven/${project.artifactId}-${project.version}-${git.buildnumber}.jar</command>
										<assembly>
											<basedir>/maven</basedir>
											<descriptorRef>artifact</descriptorRef>
										</assembly>
									</build>

									<run>
										<namingStrategy>alias</namingStrategy>
										<hostname>restserver</hostname>
										<log>
											<enabled>true</enabled>
											<prefix>REST_SERVER</prefix>
											<date>DEFAULT</date>
											<color>red</color>
										</log>
									</run>
								</image>
							</images>
						</configuration>
						<executions>
							<!-- if your unit tests require to start stop the docker image uncomment, 
								but make sure that the server component docker image first exists -->
							<!-- <execution> <id>start</id> <phase>pre-integration-test</phase> 
								<goals> <goal>build</goal> <goal>start</goal> </goals> </execution> <execution> 
								<id>stop</id> <phase>post-integration-test</phase> <goals> <goal>stop</goal> 
								</goals> </execution> -->
							<execution>
								<id>build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>push</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
							<execution>
								<id>remove</id>
								<phase>clean</phase>
								<goals>
									<goal>remove</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- specify manifest fields -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<archive>
								<manifestEntries>
									<Specification-Title>${project.name}</Specification-Title>
									<Specification-Version>${project.version}</Specification-Version>
									<Specification-Vendor>${project.specification_vendor}</Specification-Vendor>
									<Implementation-Title>${project.groupId}.${project.artifactId}</Implementation-Title>
									<Implementation-Version>${git.revision}</Implementation-Version>
									<Implementation-Vendor>${project.implementation_vendor}</Implementation-Vendor>
									<X-Git-Branch>${git.branch}</X-Git-Branch>
									<X-Git-Tag>${git.tag}</X-Git-Tag>
									<X-Git-Commits-Count>${git.commitsCount}</X-Git-Commits-Count>
								</manifestEntries>
							</archive>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>prod</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>environment</name>
					<value>prod</value>
				</property>
			</activation>
			<build>
				<finalName>${project.artifactId}-${project.version}-${git.buildnumber}</finalName>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<!-- enable JGit plugin -->
					<plugin>
						<groupId>ru.concerteza.buildnumber</groupId>
						<artifactId>maven-jgit-buildnumber-plugin</artifactId>
						<version>${jgit.version}</version>
						<executions>
							<execution>
								<id>git-buildnumber</id>
								<goals>
									<goal>extract-buildnumber</goal>
								</goals>
								<phase>prepare-package</phase>
								<configuration>
									<javaScriptBuildnumberCallback>
										((tag!=null &amp;&amp;
										tag.trim().length>0)?tag:"NOTAG") + "_" + branch
									</javaScriptBuildnumberCallback>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- fail if there is no git repository found or if there is GIT repo 
						without a tag created -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>${maven.enforcer.version}</version>
						<executions>
							<execution>
								<id>enforce-git-repo</id>
								<phase>compile</phase>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<evaluateBeanshell>
											<condition>${no.git.or.tag.bsh.expression}</condition>
											<message>${no.git.or.tag.found.msg}</message>
										</evaluateBeanshell>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
							<execution>
								<id>enforce-git-tag</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<evaluateBeanshell>
											<condition>${no.git.or.tag.bsh.expression}</condition>
											<message>${no.git.or.tag.found.msg}</message>
										</evaluateBeanshell>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- enable docker maven plugin -->
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.plugin.version}</version>
						<configuration>
							<dockerHost>${custom.docker.hostname}</dockerHost>
							<useColor>true</useColor>
							<verbose>true</verbose>
							<registry>${custom.docker.registry.hostname}</registry>
							<!-- this needs to find the cert.pem, key.pem and ca.pem file in there 
								for cert client auth to docker daemon -->
							<certPath>${custom.docker.client.cert.path}</certPath>
							<authConfig>
								<username></username>
								<password></password>
							</authConfig>
							<images>
								<image>
									<alias>dockerServer</alias>
									<!-- if there is no . or : before / like here there is no registry 
										defined, so registry tag in use now -->
									<name>${custom.docker.registry.hostname}/prod/${project.artifactId}:${git.buildnumber}</name>

									<build>
										<from>${docker.java.image.version}</from>
										<maintainer>${user.name}</maintainer>
										<tags>
											<tag>${git.buildnumber}</tag>
										</tags>
										<ports>
											<port>${docker.expose.port}</port>
										</ports>
										<volumes>
											<volume>${docker.persistent.volume}</volume>
										</volumes>
										<command>java -jar
											/maven/${project.artifactId}-${project.version}-${git.buildnumber}.jar</command>
										<assembly>
											<basedir>/maven</basedir>
											<descriptorRef>artifact</descriptorRef>
										</assembly>
									</build>

									<run>
										<namingStrategy>alias</namingStrategy>
										<hostname>restserver</hostname>
										<log>
											<enabled>true</enabled>
											<prefix>REST_SERVER</prefix>
											<date>DEFAULT</date>
											<color>red</color>
										</log>
									</run>
								</image>
							</images>
						</configuration>
						<executions>
							<!-- if your unit tests require to start stop the docker image uncomment, 
								but make sure that the server component docker image first exists -->
							<!-- <execution> <id>start</id> <phase>pre-integration-test</phase> 
								<goals> <goal>build</goal> <goal>start</goal> </goals> </execution> <execution> 
								<id>stop</id> <phase>post-integration-test</phase> <goals> <goal>stop</goal> 
								</goals> </execution> -->
							<execution>
								<id>build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>push</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
							<execution>
								<id>remove</id>
								<phase>clean</phase>
								<goals>
									<goal>remove</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- specify manifest fields -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<archive>
								<manifestEntries>
									<Specification-Title>${project.name}</Specification-Title>
									<Specification-Version>${project.version}</Specification-Version>
									<Specification-Vendor>${project.specification_vendor}</Specification-Vendor>
									<Implementation-Title>${project.groupId}.${project.artifactId}</Implementation-Title>
									<Implementation-Version>${git.revision}</Implementation-Version>
									<Implementation-Vendor>${project.implementation_vendor}</Implementation-Vendor>
									<X-Git-Branch>${git.branch}</X-Git-Branch>
									<X-Git-Tag>${git.tag}</X-Git-Tag>
									<X-Git-Commits-Count>${git.commitsCount}</X-Git-Commits-Count>
								</manifestEntries>
							</archive>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<repositories>
		<repository>
			<id>spring-releases</id>
			<url>https://repo.spring.io/libs-release</url>
		</repository>
		<repository>
			<id>sonatype-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-releases</id>
			<url>https://repo.spring.io/libs-release</url>
		</pluginRepository>
		<pluginRepository>
			<id>sonatype-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<repository>
			<id>internal.repo</id>
			<name>Internal Repository</name>
			<!-- change this to a more appropriate place like artifactory or nexus -->
			<url>file:///home/${user.name}/interanalRepo</url>
		</repository>
	</distributionManagement>
</project>